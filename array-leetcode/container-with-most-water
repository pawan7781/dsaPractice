
// 8				|	                                    |
// 7				|	                                    |	            |
// 6				|	    |	                            |	            |
// 5				|	    |	            |	            |	            |
// 4				|	    |	            |	    |	    |	            |
// 3				|	    |	            |	    |	    |	    |	    |
// 2				|	    |	    |	    |	    |	    |	    |	    |
// 1	   |	    |	    |	    |	    |	    |	    |	    |	    |
//        0        1       2       3       4       5       6       7       8
// 	            ^                                       ^
//  Input: height = [1,8,6,2,5,4,8,3,7]
//   Output: 49
// Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49

class Solution {
    public int maxArea(int[] height) {
        int left=0;
        int right=height.length-1;
        int maximum=0;
        while(left<right)
        {
            int width=right-left;
            int Height=Math.min(height[left],height[right]);
            int area=width*Height;
            maximum=Math.max(maximum, area);
            if(height[left]<height[right])
            {
                left++;

            }
            else if(height[left]>height[right])
            {
                right--;
            }
            else
            {
                left++;
                right--;
            }
        }
        return maximum;
    }
}